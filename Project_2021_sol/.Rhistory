select(note_exam, note_projet) %>%
pivot_longer(cols = c("note_exam", "note_projet")) %>%
ggplot(aes(x = value, color = name)) +
stat_ecdf() +
labs(x = "Note", y = "% d'Ã©tudiants") +
theme(axis.title = element_text(face = "bold"))
ks.test(dt$note_exam, dt$note_projet)
ggplot(complete_data, mapping = aes(x=genre, y=votes))+
geom_boxplot()
ggplot(complete_data, mapping = aes(x=genre, y=votes))+
geom_boxplot()
ggplot(complete_data) +
aes(x=genre, y=votes, fill="genre", colour="genre") +
geom_boxplot() +
xlab("Genre du cinéma") +
ylab("Votes") +
ggtitle("Répartition de notation en fonction du genre de film")
complete_data %>%
group_by(genre) %>%
summarise(moy_votes=mean(votes),
max_votes=max(votes),
min_votes=min(votes),
sd_votes=sd(votes))
votes
View(complete_data)
View(table(complete_data$genre))
top_10_film <- complete_data %>%
arrange(votes) %>%
slice(1:10)
top_10_film
typeof(complete_data$votes)
top_10_film <- complete_data %>%
arrange(votes) %>%
sort(10)
top_10_film <- complete_data %>%
arrange(votes) %>%
sort()
complete_data %>%
arrange(votes)
top_10_film <- complete_data %>%
arrange(votes)
top_10_film
View(top_10_film)
top_10_film <- complete_data %>%
arrange(votes) %>%
head(10)
top_10_film
top_10_film <- complete_data %>%
arrange(votes) %>%
head(10) %>% select(votes, original_title
)
top_10_film
top_10_film <- complete_data %>%
arrange(votes) %>%
tail(10) %>% select(votes, original_title
)
top_10_film
top_10_film <- complete_data %>%
arrange(votes) %>%
select(votes, original_title) %>%
sort(votes, decreasing = T)
top_10_film <- complete_data %>%
arrange(votes) %>%
select(votes, original_title) %>%
sort(decreasing = T)
top_10_film <- complete_data %>%
arrange(votes) %>%
select(votes, original_title) %>%
sort()
top_10_film <- complete_data %>%
select(votes, original_title) %>%
arrange(votes)
top_10_film
top_10_film <- complete_data %>%
select(votes, original_title) %>%
arrange()
top_10_film
top_10_film <- complete_data %>%
select(votes, original_title) %>%
arrange(votes)
top_10_film
top_10_film <- complete_data %>%
select(votes, original_title) %>%
arrange(votes, desc(votes))
top_10_film
top_10_film <- complete_data %>%
select(votes, original_title) %>%
arrange(desc(votes))
top_10_film
top_10_film <- complete_data %>%
select(votes, original_title) %>%
arrange(desc(votes)) %>%
head(10)
top_10_film
top_10_film <- complete_data %>%
select(votes, original_title) %>%
arrange(desc(votes)) %>%
head(10)
top_10_film
top_10_film <- complete_data %>%
# select(votes, original_title) %>%
arrange(desc(votes)) %>%
head(10)
top_10_film
top_10_film <- complete_data %>%
select(votes, genre) %>%
arrange(desc(votes)) %>%
head(10)
top_10_film
ggplot(top_10_film, aes(x=genre,y=votes, fill=genre)) +
geom_bar(stat="identity", color="black")+
theme_minimal() +
labs(title = "représenter graphiquement le top 10 des films les mieux notés",
x = "Genre", y = "Nbre_de_votes")
complete_data %>% select(genre) %>% unique()
genre1 <- complete_data %>% select(genre)
genre2 <- paste(genre1, collapse = ',')
genre3 <- strsplit(genre2, ",")
genre4 <- genre3[[1]] %>% unique
genre4
genre4 <- genre3[[1]] %>% unique %>% sort %>% as.list()
genre4
genre2 <- paste(genre1, collapse = ',')
genre2
genre1
genre2
genre2 <- paste0(genre1, collapse = ',')
genre2
genre3 <- strsplit(genre2, ",")
genre3
genre4 <- gsub('\"',"",x = genre3)
genre4
genre3 <- strsplit(genre2, ",")
genre3
genre2
genre1 <- complete_data$genre
genre1
genre2 <- paste0(genre1, collapse = ',')
genre2
genre3 <- strsplit(genre2, ",")
genre3
genre4 <- genre3[[1]] %>% unique %>% sort %>% as.list()
genre4
genre4 <- genre3[[1]] %>% unique %>% sort
genre4
uniGenre <- function(vect_){
genre1 <- vect_
genre2 <- paste0(genre1, collapse = ',')
genre3 <- strsplit(genre2, ",")
genre4 <- genre3[[1]] %>% unique %>% sort
return(genre4)
}
uniGenre(complete_data$genre)
complete_data[complete_data$genre == "Action"] %>% length()
complete_data[complete_data$genre == "Action"]
complete_data[complete_data$genre == "Action"]
complete_data %>% select(genre)
complete_data[complete_data$genre == "Action"]
complete_data %>% select(genre)
complete_data[complete_data$genre == "Action"]
complete_data$genre[complete_data$genre == "Action"]
complete_data$genre[complete_data$genre == "Action"] %>% length()
complete_data$genre[complete_data$genre == str_detect(language, "French|.French.")] %>% length()
complete_data$genre[complete_data$genre == str_detect(genre, "Action|.Action.")] %>% length()
complete_data$genre[complete_data$genre == str_detect("Action|.Action.")] %>% length()
complete_data$genre[complete_data$genre == str_detect(complete_data$genre, "Action|.Action.")] %>% length()
complete_data$genre[complete_data$genre == str_detect(complete_data$genre, "Action")] %>% length()
complete_data$genre[complete_data$genre == str_detect(complete_data$genre, "Action")] %>% length()
complete_data$genre[complete_data$genre == "Action"] %>% length()
complete_data$genre[complete_data$genre == paste0("%Action%")] %>% length()
complete_data$genre[complete_data$genre == paste0("Action")] %>% length()
complete_data$genre[complete_data$genre == paste0(".Action.")] %>% length()
complete_data$genre[complete_data$genre == paste0("Action")] %>% length()
complete_data$genre[complete_data$genre == paste0("Drama")] %>% length()
complete_data$genre[complete_data$genre == contains("Drama")] %>% length()
complete_data[grepl('Action', complete_data$genre)] %>% length()
complete_data$genre[grepl('Action', complete_data$genre)] %>% length()
fon <- uniGenre(complete_data$genre)
complete_data$genre[grepl('Action', complete_data$genre)]
complete_data$original_title[grepl('Action', complete_data$genre)]
complete_data$genre[grepl(i, complete_data$genre)] %>% lcount
complete_data$original_title[grepl('Action', complete_data$genre)] %>% count
complete_data$original_title[grepl('Action', complete_data$genre)] %>% count
complete_data$original_title[grepl('Action', complete_data$genre)] %>% length()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
complete_data <- read.csv(file = "./complete_data.csv", header = T)
#  Presentage of missng values
na_percent <- round(na_num/sum(is.na(complete_data) * 100), 3)
print.table(na_percent)
complete_data[complete_data == ""]<- NA # Remplacer les vides par des NAs.
#  Presentage of missng values
round(sapply(complete_data,function(x) sum(is.na(x))/length(x))*100, 2)
print.table(na_percent)
sapply(complete_data,function(x) sum(is.na(x)))
print.table(sapply(complete_data,function(x) sum(is.na(x))))
complete_data <- read.csv(file = "./complete_data.csv", header = T)
complete_data[complete_data == ""]<- NA # Remplacer les vides par des NAs.
sapply(complete_data,function(x) sum(is.na(x)))
complete_data <- read.csv(file = "./complete_data.csv", header = T)
complete_data <- read.csv(file = "./complete_data.csv", header = T)
sapply(complete_data,function(x) sum(is.na(x)))
complete_data <- read.csv(file = "./complete_data.csv", header = T)
sapply(complete_data,function(x) sum(is.na(x)))
#Attach the necessary libraries
library(dplyr)
library(readr)
library(DT)
#1. Capture the raw pat of the zip folder
raw_path <- "./movies.zip"
#2. unzip the folder
data <- unzip(raw_path, files = NULL, list = F, exdir = "movie_unzip")
#3. Capture the new path to the folder that contains the datasets
path_ <- "./movie_unzip"
#4. Create a function to merge all the datasets
merge_df = function(path_to_folder){
#capture the names of the files in the folder
list_name_file = list.files(path = path_to_folder, full.names = T)
#read all the files in the folder
data_list = lapply(list_name_file, function(x){
read.csv(file = x, header = TRUE)
}) #x --> names of the files to read (in this case 'list_name_file')
#combine the datasets with the reduce function
#after merging them two by two (merge function)
Reduce(function(x, y){merge(x, y, all = T)}, data_list)
}
#5. Store the complete merged dataset
# df <- merge_df(path_)
# write.csv(x = df, file = "complete_data.csv")
complete_data <- read.csv(file = "./complete_data.csv", header = T)
sapply(complete_data,function(x) sum(is.na(x)))
complete_data[complete_data == ""]<- NA # Remplacer les vides par des NAs.
sapply(complete_data,function(x) sum(is.na(x)))
#  Presentage of missng values
na_percent <- round(na_num/sum(is.na(complete_data) * 100), 3)
print.table(na_percent)
#  Presentage of missng values
na_percent <- round(na_num/sum(is.na(complete_data) * 100), 3)
print.table(na_percent)
#  Presentage of missng values
round(sapply(complete_data,function(x) sum(is.na(x))/length(x))*100, 2)
print.table(na_percent)
#  Presentage of missng values
na_percent <- round(na_num/sum(is.na(complete_data) * 100), 3)
print.table(na_percent)
#  Presentage of missng values
na_percent <- round(sapply(complete_data,function(x) sum(is.na(x))/length(x))*100, 2)
print.table(na_percent)
#  Presentage of missng values
na_percent <- round(sapply(complete_data,function(x) sum(is.na(x))/length(x))*100, 2)
print.table(na_percent)
library(tidyverse)
complete_data$duration <- as.numeric(complete_data$duration)
ggplot(complete_data, aes(x = duration)) +
geom_histogram(color = "blue", fill = 'steelblue', binwidth = 50, alpha = 1)  +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = 'Représentation graphique de la durée des films', x = 'Durée', y = 'Effectif') +
scale_y_continuous(n.breaks = 15) +
scale_x_continuous(n.breaks = 20)
library(stringr)
complete_data %>%
filter(str_detect(language, "French|.French.")) %>%
select(language) %>%
count() %>%
paste(.,'films sont disponibles en francais')
View(complete_data)
paste("La variable Year est de type :", typeof(complete_data$year))
unique(complete_data$year)
# Select year column
complete_data$year <- complete_data$year %>%
#convert as numeric type
as.numeric %>%
#replace the NA value with 2019
replace_na(., 2019)
#show unique value of recently created year column
unique(complete_data$year)
#creation of the "decade variable"
complete_data$decade <- cut(complete_data$year,
breaks = c(seq(1890,
2020, 10)),
labels = c("1890 - 1900",
"1900 - 1910",
"1910 - 1920",
"1920 - 1930",
"1930 - 1940",
"1940 - 1950",
"1950 - 1960",
"1960 - 1970",
"1970 - 1980",
"1980 - 1990",
"1990 - 2000",
"2000 - 2010",
"2010 - 2020"),
right = F,
include.lowest = T)
#randomly select some line in year and decade columns to verify the results
complete_data %>%
select(year, decade)%>%
sample_n(50) %>% datatable()
dt <- complete_data %>%
select(language, decade) %>%
group_by(decade) %>%
count(french = str_detect(language, "French|.French.")) %>%
mutate(p = scales::percent(n / sum(n))) %>%
filter(french == T)
ggplot(dt, aes(x=decade,y=n, fill=decade)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=p), vjust=-0.3, size=3.5)+
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(title = "Représentation de la quantité de films dans lesquels la langue française apparait par décenie",
x = "Décennie", y = "Effectif")
dt <- complete_data %>%
select(language, decade) %>%
group_by(decade) %>%
count(french = str_detect(language, "French|.French.")) %>%
mutate(p = scales::percent(n / sum(n))) %>%
filter(french == T)
ggplot(dt, aes(x=decade,y=n, fill=decade)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=p), vjust=-0.3, size=3.5)+
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(title = "Représentation de la quantité de films dans lesquels\n la langue française apparait par décenie",
x = "Décennie", y = "Effectif")
data <-complete_data %>%
select(starts_with("avg_vote_"))
report <- function(x, name) {
tibble(
variable  = name,
mean = round(mean(x, na.rm = FALSE), 2),
median = round(median(x, na.rm = FALSE), 2),
sd = round(sd(x), 2),
mad = round(mad(x, center = median(x),
constant = 1.4826, na.rm = FALSE,
low = FALSE, high = FALSE), 2),
coef_de_var = round((sd(x)/mean(x))*100, 2),
max = round(max(x), 2),
min = round(min(x), 2)
)
}
Ind_Stat <- data %>% imap_dfr(report)
datatable(Ind_Stat, )
dt_stat <-Ind_Stat %>%
select("mean", "median", "sd", "mad", "coef_de_var", "max", "min")
boxplot(dt_stat)
ggplot(Ind_Stat, aes(x=variable, y= , fill=variable)) +
geom_boxplot()+
geom_text(aes(label=median), vjust=-0.3, size=3.5)+
theme_minimal()
data <-complete_data %>%
select(starts_with("avg_vote_"))
report <- function(x, name) {
tibble(
variable  = name,
mean = round(mean(x, na.rm = FALSE), 2),
median = round(median(x, na.rm = FALSE), 2),
sd = round(sd(x), 2),
mad = round(mad(x, center = median(x),
constant = 1.4826, na.rm = FALSE,
low = FALSE, high = FALSE), 2),
coef_de_var = round((sd(x)/mean(x))*100, 2),
max = round(max(x), 2),
min = round(min(x), 2)
)
}
Ind_Stat <- data %>% imap_dfr(report)
datatable(Ind_Stat, )
data <-complete_data %>%
select(starts_with("avg_vote_"))
report <- function(x, name) {
tibble(
variable  = name,
mean = round(mean(x, na.rm = FALSE), 2),
median = round(median(x, na.rm = FALSE), 2),
sd = round(sd(x), 2),
mad = round(mad(x, center = median(x),
constant = 1.4826, na.rm = FALSE,
low = FALSE, high = FALSE), 2),
coef_de_var = round((sd(x)/mean(x))*100, 2),
max = round(max(x), 2),
min = round(min(x), 2)
)
}
Ind_Stat <- data %>% imap_dfr(report)
datatable(Ind_Stat, )
ggplot(Ind_Stat, aes(x=variable, y=mean, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=median, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=median), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=sd, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=sd), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=mad, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=mad), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=coef_de_var, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=coef_de_var), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=max, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=max), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=min, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=min), vjust=-0.3, size=3.5)+
theme_minimal()
# library(cowplot)
# plot_grid(moy, med, sd, mad, cv, max, min, labels = c("Moy", "Med",
#                                                       "Sd", "Mad", "cv", "max", "min"), label_size = 14, hjust = -0.5, vjust =1.5, greedy = TRUE, byrow = T)
ggplot(complete_data, mapping = aes(x=genre, y=votes))+
geom_boxplot()
complete_data %>%
group_by(genre) %>%
summarise(moy_votes=mean(votes),
max_votes=max(votes),
min_votes=min(votes),
sd_votes=sd(votes))
f <- complete_data %>%
filter(str_detect(genre, "Action"))
View(f)
f <- complete_data %>%
filter(str_detect(genre, "Action"))
tail(sort(f$genre), 10)
f <- complete_data %>%
filter(str_detect(genre, "Action"))
tail(sort(f$avg_vote), 10)
View(f)
f <- complete_data %>%
filter(str_detect(genre, "Action"))
tail(sort(f$avg_vote), 10)%>%
print(f$title)
f <- complete_data %>%
filter(str_detect(genre, "Action"))
tail(sort(f$avg_vote), 10)%>%
print(f$title)
f <- complete_data %>%
filter(str_detect(genre, "Action"))
tail(sort(f$avg_vote), 10)%>%print(f$title)
f <- complete_data %>%
filter(str_detect(genre, "Action"))
tail(sort(f$avg_vote), 10)%>%print(f)
f <- complete_data %>%
filter(str_detect(genre, ""))
tail(sort(f$avg_vote), 10)
View(f)
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(sort(f$avg_vote), 10)
```{r}
f <- complete_data %>%
filter(str_detect(genre, "Romance", tittle))
f <- complete_data %>%
filter(str_detect(genre, "Romance", title))
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(sort(f$avg_vote), 10)
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(sort(f$avg_vote), 10)
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(sort(desc(f$avg_vote)), 10)
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(sort(descending(f$avg_vote)), 10)
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(sort(f$avg_vote), 10)
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(sort(f$avg_vote), 10, decreasing = TRUE)
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(sort(f$avg_vote, decreasing = TRUE), 10)
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(order(f$avg_vote, decreasing = TRUE), 10)
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(order(f$avg_vote, decreasing = FALSE), 10)
complete_data$avg_vote
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(sort(f$avg_vote), 10)
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(rev(sort(f$avg_vote), 10))
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(rev(sort(f$avg_vote)))
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tailrev(sort(f$avg_vote), 10)
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(sort(f$avg_vote), 10)
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(sort(f$avg_vote, decreasing=T), 10)
f <- complete_data %>%
filter(str_detect(genre, "Romance"))
tail(sort(f$avg_vote), 10)
f %>%
select(avg_vote, title)
f %>%
select(avg_vote, title)%>%
tail(10)
