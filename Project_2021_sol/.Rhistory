p <- ggplot(f,aes(title,avg_vote_10))
p+geom_boxplot()
p <- ggplot(f,aes(title,avg_vote10))
p+geom_boxplot()
p <- ggplot(f,aes(title,avg_vote))
p+geom_boxplot()
p <- ggplot(f,aes(title,avg_vote))
p+geom_boxplot(varwidth=TRUE)
p <- ggplot(f,aes(title,avg_vote))
p+geom_boxplot(fill="white", colour="#3366FF")
ggplot(data = f, aes(x = title, y = avg_vote, color = title)) +
theme(axis.text.x = element_text(vjust=.8, hjust=1, angle=60)) +
geom_boxplot(aes(fill = title)) +
xlab("top 10 des films") +
ylab("Note") +
ggtitle("représentation graphique du top\n 10 des films les mieux notés")
boxplot(f$title~f$avg_vote,
col="purple",border="black",
main="Cinfonction de l'âge",
ylab="âges[années]"
)
boxplot(f$avg_vote~f$title,
col="purple",border="black",
main="Cinfonction de l'âge",
ylab="âges[années]"
)
ggplot(f, aes(x = title, fill = avg_vote)) +
geom_histogram(color = "green", binwidth = 50, alpha = 1)  +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = 'Représentation graphique de la durée des films', x = 'Durée', y = 'Effectif') +
scale_y_continuous(n.breaks = 15) +
scale_x_continuous(n.breaks = 15)
ggplot(f, aes(x = avg_vote, fill = title)) +
geom_histogram(color = "green", binwidth = 50, alpha = 1)  +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = 'Représentation graphique de la durée des films', x = 'Durée', y = 'Effectif') +
scale_y_continuous(n.breaks = 15) +
scale_x_continuous(n.breaks = 15)
ggplot(f, aes(x = title, y=avg_vote)) +
geom_histogram(color = "green", binwidth = 50, alpha = 1)  +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = 'Représentation graphique de la durée des films', x = 'Durée', y = 'Effectif') +
scale_y_continuous(n.breaks = 15) +
scale_x_continuous(n.breaks = 15)
ggplot(f, aes(x = avg_vote, y=title)) +
geom_histogram(color = "green", binwidth = 50, alpha = 1)  +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = 'Représentation graphique de la durée des films', x = 'Durée', y = 'Effectif') +
scale_y_continuous(n.breaks = 15) +
scale_x_continuous(n.breaks = 15)
ggplot(f, aes(avg_vote, col = factor(title))) +
geom_density()
ggplot(f, aes(votes, col = factor(title))) +
geom_density()
ggplot(f, aes(vote, col = factor(title))) +
geom_density()
View(f)
View(f)
ggplot(f, aes(title, col = factor(avg_vote))) +
geom_density()
ggplot(f, aes(avg_vote)) + geom_histogram(bins = 10) +
facet_grid(title ~ .)
ggplot(f, aes(avg_vote)) + geom_histogram(bins = 20) +
facet_grid(title ~ .)
ggplot(f, aes(avg_vote)) + geom_histogram(bins = 1) +
facet_grid(title ~ .)
ggplot(f, aes(avg_vote)) + geom_histogram(bins = 50) +
facet_grid(title ~ .)
ggplot(f, aes(avg_vote)) + geom_histogram() +
facet_grid(title ~ .)
ggplot(f, aes(avg_vote)) + geom_histogram(binwidth) +
facet_grid(title ~ .)
ggplot(f, aes(avg_vote)) + geom_histogram(binwidth=5) +
facet_grid(title ~ .)
ggplot(f, aes(avg_vote)) + geom_histogram(binwidth=50) +
facet_grid(title ~ .)
ggplot(f, aes(avg_vote, col = factor(title))) +
geom_density()
ggplot(mtcars, aes(factor(title), avg_vote)) +
geom_jitter()
ggplot(f, aes(factor(title), avg_vote)) +
geom_jitter()
ggplot(data = f, aes(x = title, y = avg_vote, color = title)) +
theme(axis.text.x = element_text(vjust=.8, hjust=1, angle=60)) +
geom_boxplot(aes(fill = title)) +
xlab("top 10 des films") +
ylab("Note") +
ggtitle("représentation graphique du top\n 10 des films les mieux notés")
library(readxl)
library(tidyverse)
# 1
dt <- read_excel("C:/Users/cleme/Downloads/M2TIDE_note_2017_to_2018.xlsx")
# 2
glimpse(dt)
# 3
funModeling::df_status(dt)
# 4
names(dt) <- str_replace_all(names(dt), " ", "_")
# 5
dt <- dt %>%
mutate_at(vars(starts_with("note")),
function(x){
ifelse(x == "ABSENT", NA, x) %>%
as.numeric()
})
dt <- dt %>% mutate(year_promo = as.character(year_promo))
dt %>%
select_if(is.numeric) %>%
summary()
# 6
dt %>%
count(year_promo)
# 7
dt %>%
count(year_promo, bonus) %>%
group_by(year_promo) %>%
mutate(p = scales::percent(n / sum(n))) %>%
filter(bonus == "T")
# 8
dt %>%
group_by(year_promo) %>%
summarise_if(is.numeric,
list(moy = function(x) mean(x, na.rm = T),
ec = function(x) sd(x, na.rm = T)))
# 9
dt %>%
count(year_promo, sexe) %>%
group_by(year_promo) %>%
mutate(p = n / sum(n)) %>%
ggplot(aes(x = sexe, y = p, color = sexe)) +
geom_point(size = 2) +
geom_segment(aes(x = sexe, xend = sexe,
y = 0, yend = p)) +
geom_text(aes(label = n, y = p, vjust = -0.4)) +
scale_y_continuous(labels = scales::percent) +
labs(x = "Sexe", y = "Proportion d'Ã©tudiants") +
theme(legend.position = "none") +
facet_wrap(~ year_promo)
# 10
dt_cor <- dt %>%
group_by(year_promo) %>%
summarise(cor = cor(note_exam, note_projet,
use = "complete.obs"))
ggplot(dt, aes(x = note_exam,
y = note_projet,
color = year_promo)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = F) +
geom_label(data = dt_cor,
aes(label = paste("cor:", round(cor, 2)),
x = Inf,
y = 3,
hjust = 1.2)) +
facet_wrap(~ year_promo, scales = "free") +
theme(legend.position = "none") +
labs(x = "Note examen", y = "Note projet")
dt %>%
filter(year_promo != "2020") %>%
count(sexe, bonus) %>%
group_by(sexe) %>%
mutate(p = n / sum(n))
ggplot(dt, aes(x = note_exam, color = sexe)) +
stat_ecdf() +
scale_x_continuous(breaks = seq(0, 26, 2)) +
scale_y_continuous(breaks = seq(0, 1, 0.1),
labels = scales::percent) +
labs(x = "Note examen", y = "% d'Ã©tudiants")
dt %>%
select(note_exam, note_projet) %>%
pivot_longer(cols = c("note_exam", "note_projet")) %>%
ggplot(aes(x = value, color = name)) +
stat_ecdf() +
labs(x = "Note", y = "% d'Ã©tudiants") +
theme(axis.title = element_text(face = "bold"))
ggplot(dt, aes(x = note_exam, color = sexe)) +
stat_ecdf() +
scale_x_continuous(breaks = seq(0, 26, 2)) +
scale_y_continuous(breaks = seq(0, 1, 0.1),
labels = scales::percent) +
labs(x = "Note examen", y = "% d'Ã©tudiants")
ks.test(dt$note_exam, dt$note_projet)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
complete_data %>%
select(avg_vote, genre) %>%
pivot_longer(cols = c("avg_vote", "genre")) %>%
ggplot(aes(x = value, color = name)) +
stat_ecdf() +
labs(x = "Note", y = "% d'Ã©tudiants") +
theme(axis.title = element_text(face = "bold"))
complete_data %>%
select(avg_vote, genre) %>%
pivot_longer(cols = c("avg_vote", "genre")) %>%
ggplot(aes(x = value, color = name)) +
stat_ecdf() +
labs(x = "Note", y = "% d'Ã©tudiants") +
theme(axis.title = element_text(face = "bold"))
help("stat_ecdf")
mms <- data.table::fread("C:/Users/cleme/Downloads/mms.txt")
glimpse(mms)
ggplot(mms, aes(x = Red, y = Orange)) +
geom_point()
ggplot(data = complete_data, aes(x = genre, y = avg_vote, color = genre)) +
theme(axis.text.x = element_text(vjust=.8, hjust=1, angle=60)) +
geom_boxplot(aes(fill = genre)) +
xlab("top 10 des films") +
ylab("Note") +
ggtitle("représentation graphique du top\n 10 des films les mieux notés")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#Attach the necessary libraries
library(dplyr)
library(readr)
library(DT)
#1. Capture the raw pat of the zip folder
raw_path <- "./movies.zip"
#2. unzip the folder
data <- unzip(raw_path, files = NULL, list = F, exdir = "movie_unzip")
#3. Capture the new path to the folder that contains the datasets
path_ <- "./movie_unzip"
#4. Create a function to merge all the datasets
merge_df = function(path_to_folder){
#capture the names of the files in the folder
list_name_file = list.files(path = path_to_folder, full.names = T)
#read all the files in the folder
data_list = lapply(list_name_file, function(x){
read.csv(file = x, header = TRUE)
}) #x --> names of the files to read (in this case 'list_name_file')
#combine the datasets with the reduce function
#after merging them two by two (merge function)
Reduce(function(x, y){merge(x, y, all = T)}, data_list)
}
#5. Store the complete merged dataset
# df <- merge_df(path_)
# write.csv(x = df, file = "complete_data.csv")
complete_data <- read.csv(file = "./complete_data.csv", header = T)
sapply(complete_data,function(x) sum(is.na(x)))
complete_data[complete_data == ""]<- NA # Remplacer les vides par des NAs.
sapply(complete_data,function(x) sum(is.na(x)))
#  Presentage of missng values
na_percent <- round(sapply(complete_data,function(x) sum(is.na(x))/length(x))*100, 2)
print.table(na_percent)
library(tidyverse)
complete_data$duration <- as.numeric(complete_data$duration)
ggplot(complete_data, aes(x = duration, fill = duration)) +
geom_histogram(color = "green", binwidth = 50, alpha = 1)  +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = 'Représentation graphique de la durée des films', x = 'Durée', y = 'Effectif') +
scale_y_continuous(n.breaks = 15) +
scale_x_continuous(n.breaks = 15)
library(stringr)
complete_data %>%
filter(str_detect(language, "French|.French.")) %>%
select(language) %>%
count() %>%
paste(.,'films sont disponibles en francais')
paste("La variable Year est de type :", typeof(complete_data$year))
unique(complete_data$year)
# Select year column
complete_data$year <- complete_data$year %>%
#convert as numeric type
as.numeric %>%
#replace the NA value with 2019
replace_na(., 2019)
#show unique value of recently created year column
unique(complete_data$year)
#creation of the "decade variable"
complete_data$decade <- cut(complete_data$year,
breaks = c(seq(1890,
2020, 10)),
labels = c("1890 - 1900",
"1900 - 1910",
"1910 - 1920",
"1920 - 1930",
"1930 - 1940",
"1940 - 1950",
"1950 - 1960",
"1960 - 1970",
"1970 - 1980",
"1980 - 1990",
"1990 - 2000",
"2000 - 2010",
"2010 - 2020"),
right = F,
include.lowest = T)
#randomly select some line in year and decade columns to verify the results
complete_data %>%
select(year, decade)%>%
sample_n(50) %>% datatable()
dt <- complete_data %>%
select(language, decade) %>%
group_by(decade) %>%
count(french = str_detect(language, "French|.French.")) %>%
mutate(p = scales::percent(n / sum(n))) %>%
filter(french == T)
ggplot(dt, aes(x=decade,y=n, fill=decade)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=p), vjust=-0.3, size=3.5)+
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(title = "Représentation de la quantité de films dans lesquels\n la langue française apparait par décenie",
x = "Décennie", y = "Effectif")
data <-complete_data %>%
select(starts_with("avg_vote_"))
report <- function(x, name) {
tibble(
variable  = name,
mean = round(mean(x, na.rm = FALSE), 2),
median = round(median(x, na.rm = FALSE), 2),
sd = round(sd(x), 2),
mad = round(mad(x, center = median(x),
constant = 1.4826, na.rm = FALSE,
low = FALSE, high = FALSE), 2),
coef_de_var = round((sd(x)/mean(x))*100, 2),
max = round(max(x), 2),
min = round(min(x), 2)
)
}
Ind_Stat <- data %>% imap_dfr(report)
datatable(Ind_Stat,)
ggplot(Ind_Stat, aes(x=variable, y=mean, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=median, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=median), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=sd, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=sd), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=mad, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=mad), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=coef_de_var, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=coef_de_var), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=max, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=max), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=min, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=min), vjust=-0.3, size=3.5)+
theme_minimal()
# library(cowplot)
# plot_grid(moy, med, sd, mad, cv, max, min, labels = c("Moy", "Med",
#                                                       "Sd", "Mad", "cv", "max", "min"), label_size = 14, hjust = -0.5, vjust =1.5, greedy = TRUE, byrow = T)
ggplot(data = complete_data, aes(x = genre, y = avg_vote, color = genre)) +
theme(axis.text.x = element_text(vjust=.8, hjust=1, angle=60)) +
geom_boxplot(aes(fill = genre)) +
xlab("top 10 des films") +
ylab("Note") +
ggtitle("représentation graphique du top\n 10 des films les mieux notés")
f <- complete_data %>%
filter(str_detect(genre, "Action")) %>%
select(avg_vote, title) %>%
arrange(desc(avg_vote)) %>%
head(10)
ggplot(data = f, aes(x = title, y = avg_vote, color = title)) +
theme(axis.text.x = element_text(vjust=.8, hjust=1, angle=60)) +
geom_boxplot(aes(fill = title)) +
xlab("top 10 des films") +
ylab("Note") +
ggtitle("représentation graphique du top\n 10 des films les mieux notés")
complete_data %>% select(genre) %>% unique()
uniGenre <- function(vect_){
genre1 <- vect_
genre2 <- paste0(genre1, collapse = ',')
genre3 <- strsplit(genre2, ",")
genre4 <- genre3[[1]] %>% unique %>% sort
return(genre4)
}
fon <- uniGenre(complete_data$genre)
complete_data %>% select(genre) %>% unique()
uniGenre <- function(vect_){
genre1 <- vect_
genre2 <- paste0(genre1, collapse = ',')
genre3 <- strsplit(genre2, ",")
genre4 <- genre3[[1]] %>% unique %>% sort
return(genre4)
}
# fon <- uniGenre(complete_data$genre)
fon <- uniGenre(complete_data$genre)
fon
uniGenre
fon
dt %>%
select(note_exam, note_projet) %>%
pivot_longer(cols = c("note_exam", "note_projet")) %>%
ggplot(aes(x = value, color = name)) +
stat_ecdf() +
labs(x = "Note", y = "% d'Ã©tudiants") +
theme(axis.title = element_text(face = "bold"))
ks.test(dt$note_exam, dt$note_projet)
dt %>%
select(note_exam, note_projet) %>%
pivot_longer(cols = c("note_exam", "note_projet")) %>%
ggplot(aes(x = value, color = name)) +
stat_ecdf() +
labs(x = "Note", y = "% d'Ã©tudiants") +
theme(axis.title = element_text(face = "bold"))
ks.test(dt$note_exam, dt$note_projet)
dt %>%
select(note_exam, note_projet) %>%
pivot_longer(cols = c("note_exam", "note_projet")) %>%
ggplot(aes(x = value, color = name)) +
stat_ecdf() +
labs(x = "Note", y = "% d'Ã©tudiants") +
theme(axis.title = element_text(face = "bold"))
library(readxl)
library(tidyverse)
# 1
dt <- read_excel("C:/Users/cleme/Downloads/M2TIDE_note_2017_to_2018.xlsx")
# 2
glimpse(dt)
# 3
funModeling::df_status(dt)
# 4
names(dt) <- str_replace_all(names(dt), " ", "_")
# 5
dt <- dt %>%
mutate_at(vars(starts_with("note")),
function(x){
ifelse(x == "ABSENT", NA, x) %>%
as.numeric()
})
dt <- dt %>% mutate(year_promo = as.character(year_promo))
dt %>%
select_if(is.numeric) %>%
summary()
# 6
dt %>%
count(year_promo)
# 7
dt %>%
count(year_promo, bonus) %>%
group_by(year_promo) %>%
mutate(p = scales::percent(n / sum(n))) %>%
filter(bonus == "T")
# 8
dt %>%
group_by(year_promo) %>%
summarise_if(is.numeric,
list(moy = function(x) mean(x, na.rm = T),
ec = function(x) sd(x, na.rm = T)))
# 9
dt %>%
count(year_promo, sexe) %>%
group_by(year_promo) %>%
mutate(p = n / sum(n)) %>%
ggplot(aes(x = sexe, y = p, color = sexe)) +
geom_point(size = 2) +
geom_segment(aes(x = sexe, xend = sexe,
y = 0, yend = p)) +
geom_text(aes(label = n, y = p, vjust = -0.4)) +
scale_y_continuous(labels = scales::percent) +
labs(x = "Sexe", y = "Proportion d'Ã©tudiants") +
theme(legend.position = "none") +
facet_wrap(~ year_promo)
# 10
dt_cor <- dt %>%
group_by(year_promo) %>%
summarise(cor = cor(note_exam, note_projet,
use = "complete.obs"))
ggplot(dt, aes(x = note_exam,
y = note_projet,
color = year_promo)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = F) +
geom_label(data = dt_cor,
aes(label = paste("cor:", round(cor, 2)),
x = Inf,
y = 3,
hjust = 1.2)) +
facet_wrap(~ year_promo, scales = "free") +
theme(legend.position = "none") +
labs(x = "Note examen", y = "Note projet")
# 11
dt %>%
filter(year_promo != "2020") %>%
count(sexe, bonus) %>%
group_by(sexe) %>%
mutate(p = n / sum(n))
dt %>%
count(year_promo, sexe) %>%
group_by(year_promo) %>%
mutate(p = n / sum(n)) %>%
ggplot(aes(x = sexe, y = p, color = sexe)) +
geom_point(size = 2) +
geom_segment(aes(x = sexe, xend = sexe,
y = 0, yend = p)) +
geom_text(aes(label = n, y = p, vjust = -0.4)) +
scale_y_continuous(labels = scales::percent) +
labs(x = "Sexe", y = "Proportion d'Ã©tudiants") +
theme(legend.position = "none") +
facet_wrap(~ year_promo)
dt %>%
count(year_promo, sexe) %>%
group_by(year_promo) %>%
mutate(p = n / sum(n)) %>%
ggplot(aes(x = sexe, y = p, color = sexe)) +
geom_point(size = 2) +
geom_segment(aes(x = sexe, xend = sexe,
y = 0, yend = p)) +
geom_text(aes(label = n, y = p, vjust = -0.4)) +
scale_y_continuous(labels = scales::percent) +
labs(x = "Sexe", y = "Proportion d'Ã©tudiants") +
theme(legend.position = "none") +
facet_wrap(~ year_promo)
